{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Cards/Cards.jsx","Api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","style","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterButton","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","newUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCounrtyChange","setCountries","FormControl","styles","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","covidData","setState","this","Style","image","src","coronaImage","alt","developer","social","Footer","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.332ebbbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3hFfd\",\"card\":\"Cards_card__2fwah\",\"infected\":\"Cards_infected__1yzTi\",\"recovered\":\"Cards_recovered__4YB5l\",\"deaths\":\"Cards_deaths__2MZLZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__fNhLa\",\"container\":\"App_container__26yf0\",\"image\":\"App_image__1RvoY\",\"developer\":\"App_developer__1siOd\",\"Footer\":\"App_Footer__2QprO\",\"social\":\"App_social__2zqk3\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\n\r\nimport cx from 'classnames';\r\nimport Countup from 'react-countup';\r\n\r\nimport style from './Cards.module.css';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate} }) =>{\r\n\r\nif(!confirmed){\r\n\treturn \"Loading...\";\r\n}\r\n\treturn(\r\n\t\t<div className={style.container}>\r\n\t\t\t<Grid container spacing={3} justify=\"center\">\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(style.card, style.infected)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterButton>Infected</Typography>\r\n\t\t\t\t\t\t<Typography variant =\"h5\" style={{color: \"#4444fd\"}}>\r\n\t\t\t\t\t\t\t<Countup\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={confirmed.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of active case of COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(style.card, style.recovered)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterButton>Recovered</Typography>\r\n\t\t\t\t\t\t<Typography variant =\"h5\" style={{color: \"#47c547\"}}>\r\n\t\t\t\t\t\t\t<Countup\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={recovered.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of recoveries case of COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item component={Card} xs={12} md={3} className={cx(style.card, style.deaths)}>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\" gutterButton>Deaths</Typography>\r\n\t\t\t\t\t\t<Typography variant =\"h5\" style={{color: \"#ff5252\"}}>\r\n\t\t\t\t\t\t\t<Countup\r\n\t\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\t\tend={deaths.value}\r\n\t\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t\t<Typography variant=\"body2\">Number of Deaths caused of COVID-19</Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async(country) =>{\r\n\tlet newUrl = url;\r\n\r\n\tif (country) {\r\n\t\tnewUrl = `${url}/countries/${country}`\r\n\t}\r\n\r\n\ttry{\r\n\t\tconst {data:{confirmed, recovered, deaths, lastUpdate}}=await axios.get(newUrl);\r\n\t\treturn {confirmed, recovered, deaths, lastUpdate};\r\n\t}catch(e){\r\n\t\tconsole.log(e);\r\n\t}\r\n}\r\n\r\nexport const fetchDailyData = async() =>{\r\n\ttry{\r\n\t\tconst { data }= await axios.get(`${url}/daily`);\r\n\r\n\t\tconst modifiedData = data.map((dailyData) =>({\r\n\t\t\tconfirmed: dailyData.confirmed.total,\r\n\t\t\tdeaths: dailyData.deaths.total,\r\n\t\t\tdate: dailyData.reportDate\r\n\t\t}))\r\n\t\treturn modifiedData;\r\n\t}catch(e){\r\n\t\tconsole.log(e);\r\n\t}\r\n}\r\n\r\n\r\nexport const fetchCountries = async() =>{\r\n\ttry{\r\n\t\tconst { data: {countries} }= await axios.get(`${url}/countries`);\r\n\r\n\t\treturn countries.map((country) => country.name);\r\n\t}catch(e){\r\n\t\tconsole.log(e);\r\n\t}\r\n}","import React, {useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../Api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport style from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered}, country}) =>{\r\n\tconst [dailyData, setDailyData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchApi =async() => {\r\n\t\t\tsetDailyData(await fetchDailyData())\r\n\t\t}\r\n\t\tfetchApi();\r\n\t},[]);\r\n\r\n\tconst lineChart = (\r\n\t\tdailyData[0]\r\n\t\t? (\r\n\t\t\t<Line \r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels:dailyData.map(({ date }) => date),\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tdata: dailyData.map(({ confirmed }) => confirmed),\r\n\t\t\t\t\t\tlabel: 'Infected',\r\n\t\t\t\t\t\tborderColor: '#3333ff',\r\n\t\t\t\t\t\tfill: true\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tdata: dailyData.map(({ deaths }) => deaths),\r\n\t\t\t\t\t\tlabel: 'deaths',\r\n\t\t\t\t\t\tborderColor: 'red',\r\n\t\t\t\t\t\tbackgroundColor: 'rgba(255, 0, 0, 0)',\r\n\t\t\t\t\t\tfill: true\t\t\t\t\t\r\n\t\t\t\t\t}]\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t):null\r\n\t)\r\n\r\n//console.log(confirmed);\r\n\tconst barChart = (\r\n\t\tconfirmed\r\n\t\t? (\r\n\t\t\t<Bar \r\n\t\t\t\tdata={{\r\n\t\t\t\t\tlabels: ['Infected', 'Recovered', 'Deaths'],\r\n\t\t\t\t\tdatasets: [{\r\n\t\t\t\t\t\tlabel: 'People',\r\n\t\t\t\t\t\tbackgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n\t\t\t\t\t\tdata: [confirmed.value, recovered.value, deaths.value]\r\n\t\t\t\t\t}]\r\n\t\t\t\t}}\r\n\t\t\t\toptions={{\r\n\t\t\t\t\tlegend: {display:false},\r\n\t\t\t\t\ttitle: {display:true, text:`Current state is ${country}`}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t):null\r\n\t)\r\n\r\n\treturn(\r\n\t<div className={style.container}>\r\n\t\t{country? barChart : lineChart}\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect , FormControl} from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../Api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ handleCounrtyChange }) =>{\r\n\r\n\tconst [countries, setCountries] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchApi =async () => {\r\n\t\t\tsetCountries(await fetchCountries())\r\n\t\t}\r\n\t\tfetchApi()\r\n\t}, [])\r\n\t//console.log(countries);\r\n\r\n\treturn(\r\n\t\t<FormControl className={styles.formControl}>\r\n\t\t\t<NativeSelect defaultValue=\"\" onChange={(e) => handleCounrtyChange(e.target.value)}>\r\n\t\t\t\t<option value=\"\">Global</option>\r\n\t\t\t\t{\r\n\t\t\t\t\tcountries.map((country, i) => <option key={i} value={country}>{country}</option>)\r\n\t\t\t\t}\r\n\t\t\t</NativeSelect>\r\n\t\t</FormControl>\r\n\t)\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\nimport {Cards, Chart, CountryPicker} from './components';\n\nimport Style from './App.module.css';\nimport { fetchData } from './Api';\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component{\n  \n  state = {\n    data: {},\n    country:''\n  }\n\n  async componentDidMount() {\n    const covidData = await fetchData();\n    this.setState({data: covidData});\n  }\n\n  handleCounrtyChange =async (country) => {\n    const covidData = await fetchData(country);\n    this.setState({data: covidData, country: country});\n  }\n\n  render(){\n    const {data, country} = this.state;\n    console.log(data.confirmed);\n    return(\n          <div className={Style.container}>\n            <img className={Style.image} src={coronaImage} alt=\"COVID-19\"/>\n            <div className={Style.developer}><h3 className={Style.social}>By Krishna</h3></div>\n            <Cards data={data} />\n            <CountryPicker handleCounrtyChange={this.handleCounrtyChange}></CountryPicker>\n            <Chart data={data} country={country}></Chart>\n            <div className={Style.Footer}><h3 className={Style.social}>Data Source of &nbsp;\n              <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Covid19 Tracker..\n              </a></h3>\n            </div>\n          </div>\n      )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1ZWy5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3re8_\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}